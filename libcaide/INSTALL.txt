Building instructions for caide command line utility
----------------------------------------------------


This document describes how to build caide from source code and run tests.
If you're looking for a user manual, see README.md instead.


Obtaining source code
---------------------

    > git clone https://github.com/slycelote/caide
    > cd caide/libcaide
    > git submodule update --init --recursive


General build requirements
--------------------------

CMake, make, g++, Python and Haskell Stack (or cabal+ghc) are required to
build.
In addition, curl, diff, PhantomJS, and a C# compiler are required to run tests.


Linux build
-----------

All dependencies are likely to be present in your distribution's repositories.
For example, in Debian:

    > sudo apt-get install cmake g++ python haskell-stack

Once the dependencies are installed, run the following commands from libcaide
directory:

    > stack init
    > stack setup
    > stack build

The resulting executable is in $(stack path --local-install-root)/bin.

Install test dependencies and run tests:

    > sudo apt-get install curl diffutils mono-gmcs phantomjs
    > MONO=mono tests/run-tests.sh


Windows build
-------------

First, install Haskell Stack tool (https://www.haskellstack.org/). Make sure
it's in your PATH.

From libcaide directory run:

    > stack init
    > stack setup

Setup build environment. You need to do this every time you open a new console
window.

    > setup-env.bat

Next, install make, cmake and Python. It can be done in two ways:
  1. Install each utility individually and make sure they are in your PATH
  (either by changing the system environment variable or by modifying
  setup-env.bat accordingly.)
  2. Install the utilities only inside MSYS environment bundled with Stack:

    > stack exec pacman -- -S make cmake python2

Once all dependencies are installed, you are ready to build with:

    > stack build

To run tests, launch MSYS shell:

    > stack exec bash

and setup test environment (you will need to modify paths to PhantomJS and C#
compiler in setup-test-env.sh file if necessary):

    > . setup-test-env.sh

Now you can run tests with:

    > tests/run-tests.sh

